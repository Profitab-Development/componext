"use client"

import { useState } from "react"

interface CountryCode {
  code: string
  name: string
  flag: string
}

const countryCodes: CountryCode[] = [
  { code: "+380", name: "–£–∫—Ä–∞—ó–Ω–∞", flag: "üá∫üá¶" },
  { code: "+1", name: "–°–®–ê", flag: "üá∫üá∏" },
  { code: "+44", name: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è", flag: "üá¨üáß" },
  { code: "+49", name: "–ù—ñ–º–µ—á—á–∏–Ω–∞", flag: "üá©üá™" },
  { code: "+33", name: "–§—Ä–∞–Ω—Ü—ñ—è", flag: "üá´üá∑" },
  { code: "+39", name: "–Ü—Ç–∞–ª—ñ—è", flag: "üáÆüáπ" },
  { code: "+7", name: "–†–æ—Å—ñ—è", flag: "üá∑üá∫" },
  { code: "+48", name: "–ü–æ–ª—å—â–∞", flag: "üáµüá±" },
]

export function ContactForm() {
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    countryCode: "+380"
  })
  
  const [errors, setErrors] = useState({
    name: "",
    phone: ""
  })
  
  const [isSubmitting, setIsSubmitting] = useState(false)

  const validateName = (name: string): string => {
    if (!name.trim()) return "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"
    if (name.trim().length < 2) return "–Ü–º'—è –º–∞—î –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏"
    if (name.trim().length > 50) return "–Ü–º'—è –º–∞—î –±—É—Ç–∏ –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤"
    if (!/^[–∞-—è–ê-–Øa-zA-Z\s]+$/.test(name.trim())) return "–Ü–º'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏"
    return ""
  }

  const validatePhone = (phone: string): string => {
    if (!phone.trim()) return "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"
    const phoneRegex = /^[0-9\s\-\(\)]+$/
    if (!phoneRegex.test(phone.trim())) return "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, —Ç–∏—Ä–µ —Ç–∞ –¥—É–∂–∫–∏"
    if (phone.replace(/\D/g, "").length < 9) return "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π"
    if (phone.replace(/\D/g, "").length > 15) return "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π"
    return ""
  }

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    
    // Clear error when user starts typing
    if (errors[field as keyof typeof errors]) {
      setErrors(prev => ({ ...prev, [field]: "" }))
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    const nameError = validateName(formData.name)
    const phoneError = validatePhone(formData.phone)
    
    setErrors({
      name: nameError,
      phone: phoneError
    })
    
    if (nameError || phoneError) return
    
    setIsSubmitting(true)
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // Reset form
      setFormData({ name: "", phone: "", countryCode: "+380" })
      alert("–§–æ—Ä–º–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    } catch (error) {
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="mt-8 max-w-2xl">
      <h4 className="text-[20px] font-medium text-[#3F3F46] mb-6" style={{ fontFamily: 'Suisse Intl, system-ui, sans-serif' }}>
        –§–æ—Ä–º–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
      </h4>
      
      <div className="space-y-6">
        {/* Name Field */}
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-[#3F3F46] mb-2">
            –Ü–º'—è *
          </label>
          <input
            type="text"
            id="name"
            value={formData.name}
            onChange={(e) => handleInputChange("name", e.target.value)}
            className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
              errors.name ? "border-red-500" : "border-gray-300"
            }`}
            placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"
          />
          {errors.name && (
            <p className="mt-1 text-sm text-red-500">{errors.name}</p>
          )}
        </div>

        {/* Phone Field */}
        <div>
          <label htmlFor="phone" className="block text-sm font-medium text-[#3F3F46] mb-2">
            –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É *
          </label>
          <div className="flex gap-2">
            {/* Country Code Select */}
            <select
              value={formData.countryCode}
              onChange={(e) => handleInputChange("countryCode", e.target.value)}
              className="px-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white"
            >
              {countryCodes.map((country) => (
                <option key={country.code} value={country.code}>
                  {country.flag} {country.code}
                </option>
              ))}
            </select>
            
            {/* Phone Input */}
            <input
              type="tel"
              id="phone"
              value={formData.phone}
              onChange={(e) => handleInputChange("phone", e.target.value)}
              className={`flex-1 px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.phone ? "border-red-500" : "border-gray-300"
              }`}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
            />
          </div>
          {errors.phone && (
            <p className="mt-1 text-sm text-red-500">{errors.phone}</p>
          )}
        </div>

        {/* Submit Button */}
        <button
          type="submit"
          disabled={isSubmitting}
          className={`w-full py-3 px-6 rounded-lg font-medium transition-colors ${
            isSubmitting
              ? "bg-gray-400 cursor-not-allowed"
              : "bg-blue-600 hover:bg-blue-700 active:bg-blue-800"
          } text-white`}
        >
          {isSubmitting ? "–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ..." : "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç"}
        </button>
      </div>
    </form>
  )
}
